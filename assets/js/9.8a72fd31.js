(window.webpackJsonp=window.webpackJsonp||[]).push([[9],{224:function(a,e,s){"use strict";s.r(e);var t=s(17),n=Object(t.a)({},(function(){var a=this,e=a.$createElement,s=a._self._c||e;return s("ContentSlotsDistributor",{attrs:{"slot-key":a.$parent.slotKey}},[s("h1",{attrs:{id:"mobx-源码分析-第一阶段汇总"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#mobx-源码分析-第一阶段汇总","aria-hidden":"true"}},[a._v("#")]),a._v(" Mobx 源码分析 - 第一阶段汇总")]),a._v(" "),s("blockquote",[s("p",[a._v("当我们写 "),s("code",[a._v("age = observable.box(12)")]),a._v(" 的时候，写 "),s("code",[a._v("@observable age = 12")]),a._v(" 的时候，写 "),s("code",[a._v("age = observable(12)")]),a._v(" 的时候，"),s("code",[a._v("mobx")]),a._v(" 做了什么？不知道有多少人仔细研究过，没研究也不要紧，这篇文章就是带你去了解，"),s("code",[a._v("mobx")]),a._v(" 具体做了什么？")])]),a._v(" "),s("h2",{attrs:{id:"api-observable-ts-文件"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#api-observable-ts-文件","aria-hidden":"true"}},[a._v("#")]),a._v(" api/observable.ts 文件")]),a._v(" "),s("h3",{attrs:{id:"observable-box"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observable-box","aria-hidden":"true"}},[a._v("#")]),a._v(" observable.box")]),a._v(" "),s("p",[s("code",[a._v("observable")]),a._v(" 上绑定了许多属性，比如常用的 "),s("code",[a._v("box")]),a._v("、"),s("code",[a._v("map")]),a._v(" 和 "),s("code",[a._v("array")]),a._v("。当我们调用 "),s("code",[a._v("observable.box")]),a._v(" 的时候，"),s("code",[a._v("mobx")]),a._v(" 会首先判断当前调用方式，如果当前的调用方式会 "),s("code",[a._v("decorator")]),a._v(" 调用，则直接报错。")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("if")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("arguments"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("length "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v(">")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token number"}},[a._v("2")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("incorrectlyUsedAsDecorator")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v('"box"')]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[a._v("为什么 "),s("code",[a._v("mobx")]),a._v(" 可以通过参数个数就能判断出来当前是否为 "),s("code",[a._v("decorator")]),a._v(" 调用？那是因为如果通过装饰器调用，会往函数内传入 "),s("strong",[a._v("3")]),a._v(" 个参数，所以这边通过判断参数个数就可以确定当前是否为 "),s("code",[a._v("decorator")]),a._v(" 调用。")]),a._v(" "),s("p",[a._v("相信大家都知道 "),s("code",[a._v("box")]),a._v(" 方法还有第二个参数 (不仅仅只是 "),s("code",[a._v("box")]),a._v(" 有)，这个参数的作用主要用以判断用哪一个 "),s("code",[a._v("enhancer")]),a._v(" 和 "),s("code",[a._v("name")]),a._v(" 的值。")]),a._v(" "),s("p",[a._v("最后返回 "),s("code",[a._v("ObservableValue")]),a._v(" 实例。")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ObservableValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("value"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("getEnhancerFromOptions")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("true")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v(" o"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("equals"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("h3",{attrs:{id:"observable"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observable","aria-hidden":"true"}},[a._v("#")]),a._v(" @observable")]),a._v(" "),s("p",[a._v("调用 "),s("code",[a._v("observable")]),a._v(" 时候，等于调用 "),s("code",[a._v("createObservable")]),a._v("。")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" observable "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" createObservable\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br")])]),s("p",[s("code",[a._v("createObservable")]),a._v(" 接收 3 个参数，内部会对第二个参数进行判断，如果为 "),s("code",[a._v("string")]),a._v("，则调用 "),s("code",[a._v("deepDecorator")]),a._v(" 函数。")]),a._v(" "),s("h3",{attrs:{id:"observable-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observable-2","aria-hidden":"true"}},[a._v("#")]),a._v(" observable()")]),a._v(" "),s("p",[a._v("如果传入的参数为已监听对象，则直接返回；如果不是基本数据类型，则根据参数类型调用不同的包装方法，比如对于 "),s("code",[a._v("array")]),a._v(" 调用 "),s("code",[a._v("observable.array")]),a._v("。如果是 "),s("code",[a._v("NaN")]),a._v("，直接返回。如果是基本数据类型，提醒用户使用 "),s("code",[a._v("observable.box")]),a._v(" 方法。")]),a._v(" "),s("hr"),a._v(" "),s("p",[a._v("我们已经知道 "),s("code",[a._v("mobx")]),a._v(" 对于我们的代码会做两件不同的事，一种调用 "),s("code",[a._v("deepDecorator")]),a._v(" 函数，一种实例化 "),s("code",[a._v("ObservableValue")]),a._v("。")]),a._v(" "),s("blockquote",[s("p",[a._v("注意，这里我们只针对于传入的值为 "),s("code",[a._v("number")]),a._v(" 类型讨论，不同类型有不同的实现方式")])]),a._v(" "),s("h2",{attrs:{id:"observable-box-2"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observable-box-2","aria-hidden":"true"}},[a._v("#")]),a._v(" observable.box")]),a._v(" "),s("p",[a._v("实例化 "),s("code",[a._v("ObservableValue")]),a._v("，"),s("code",[a._v("ObservableValue")]),a._v(" 类继承 "),s("code",[a._v("Atom")]),a._v(" 类，"),s("code",[a._v("ObservableValue")]),a._v(" 内部重写了 "),s("code",[a._v("set")]),a._v(" 和 "),s("code",[a._v("get")]),a._v(" 方法。")]),a._v(" "),s("p",[a._v("当访问实例时，会向全局发出 "),s("code",[a._v("reportObserved")]),a._v(" 事件，并把当前实例存到 "),s("code",[a._v("derivation.newObserving")]),a._v(" 中，以便数据发生更改，通知 "),s("code",[a._v("derivation")]),a._v("。在这里，实例为被观察者，"),s("code",[a._v("derivation")]),a._v(" 为观察者。")]),a._v(" "),s("p",[a._v("修改实例值时，会开启事务处理，并向所有的观察者推送此次事件，推送完成后结束事务处理。")]),a._v(" "),s("p",[a._v("究竟 "),s("code",[a._v("mobx")]),a._v(" 是如何更新依赖关系？我们以 "),s("code",[a._v("autorun")]),a._v(" 举例。")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token function"}},[a._v("autorun")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=>")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    console"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("log")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("age"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token function"}},[a._v("get")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br")])]),s("p",[a._v("当我们调用 "),s("code",[a._v("autorun")]),a._v(" 时候，会在全局状态中增加当前实例，也就是当前的 "),s("code",[a._v("derivation")]),a._v("，"),s("code",[a._v("autorun")]),a._v(" 参数执行时，会把 "),s("code",[a._v("age")]),a._v(" 的值，也就是 "),s("code",[a._v("ObservableValue")]),a._v(" 实例，推入到当前的 "),s("code",[a._v("derivation")]),a._v(" 属性中，"),s("code",[a._v("derivation")]),a._v(" 会用 "),s("code",[a._v("diffValue")]),a._v(" 来刷新当前依赖关系，保持依赖最新。")]),a._v(" "),s("h2",{attrs:{id:"observable-3"}},[s("a",{staticClass:"header-anchor",attrs:{href:"#observable-3","aria-hidden":"true"}},[a._v("#")]),a._v(" @observable")]),a._v(" "),s("p",[a._v("调用 "),s("code",[a._v("createDecoratorForEnhancer")]),a._v(" 返回值，在原型上添加 "),s("code",[a._v("__mobxDecorators")]),a._v(" 对象，此对象的每一个属性 ( 比方说 "),s("em",[a._v("@observable age")]),a._v("，这里面的属性就是 "),s("em",[a._v("age")]),a._v(" ) 都会存放一些关键信息，并劫持属性的 "),s("code",[a._v("get")]),a._v(" 与 "),s("code",[a._v("set")]),a._v(" 方法。")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[a._v("target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("__mobxDecorators"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("prop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("{")]),a._v("\n    prop"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    propertyCreator"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    descriptor"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    decoratorTarget"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(":")]),a._v(" target"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    decoratorArguments\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("}")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br"),s("span",{staticClass:"line-number"},[a._v("7")]),s("br")])]),s("p",[a._v("当访问属性，会在原型上添加 "),s("code",[a._v("__mobxDidRunLazyInitializers")]),a._v(" 和 "),s("code",[a._v("$mobx")]),a._v("。"),s("code",[a._v("$mobx")]),a._v(" 内存放 "),s("code",[a._v("ObservableObjectAdministration")]),a._v(" 实例，并在 "),s("code",[a._v("$mobx.values")]),a._v(" 对应的每一个属性存放 "),s("code",[a._v("ObservableValue")]),a._v(" 实例。")]),a._v(" "),s("div",{staticClass:"language-js line-numbers-mode"},[s("pre",{pre:!0,attrs:{class:"language-js"}},[s("code",[s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("const")]),a._v(" observable "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("adm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("values"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("[")]),a._v("propName"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("]")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token operator"}},[a._v("=")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token keyword"}},[a._v("new")]),a._v(" "),s("span",{pre:!0,attrs:{class:"token class-name"}},[a._v("ObservableValue")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v("(")]),a._v("\n    newValue"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    enhancer"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token template-string"}},[s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[a._v("`")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("${")]),a._v("adm"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(".")]),a._v("name"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("}")])]),s("span",{pre:!0,attrs:{class:"token string"}},[a._v(".")]),s("span",{pre:!0,attrs:{class:"token interpolation"}},[s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("${")]),a._v("propName"),s("span",{pre:!0,attrs:{class:"token interpolation-punctuation punctuation"}},[a._v("}")])]),s("span",{pre:!0,attrs:{class:"token template-punctuation string"}},[a._v("`")])]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(",")]),a._v("\n    "),s("span",{pre:!0,attrs:{class:"token boolean"}},[a._v("false")]),a._v("\n"),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),s("span",{pre:!0,attrs:{class:"token punctuation"}},[a._v(")")]),a._v("\n")])]),a._v(" "),s("div",{staticClass:"line-numbers-wrapper"},[s("span",{staticClass:"line-number"},[a._v("1")]),s("br"),s("span",{staticClass:"line-number"},[a._v("2")]),s("br"),s("span",{staticClass:"line-number"},[a._v("3")]),s("br"),s("span",{staticClass:"line-number"},[a._v("4")]),s("br"),s("span",{staticClass:"line-number"},[a._v("5")]),s("br"),s("span",{staticClass:"line-number"},[a._v("6")]),s("br")])]),s("p",[a._v("并对于属性的访问和读取会再次劫持，每当访问，都会调用原型上 "),s("code",[a._v("$mobx")]),a._v(" 中 "),s("code",[a._v("read")]),a._v(" 和 "),s("code",[a._v("write")]),a._v(" 方法。"),s("code",[a._v("read")]),a._v(" 和 "),s("code",[a._v("write")]),a._v(" 方法所做的事与 "),s("code",[a._v("observable.box")]),a._v(" 内部 "),s("code",[a._v("get")]),a._v(" 和 "),s("code",[a._v("set")]),a._v(" 做的事情一样。")]),a._v(" "),s("comment-comment")],1)}),[],!1,null,null,null);e.default=n.exports}}]);